#!/bin/bash

#	make icmc bib citation from html table

if [[ $1 ]] ; then
	INPUT=$1
else
	echo "Provide an input file: copy-paste the text from <query>_table.html into a column-separated file. Use that file as input 1"
	exit 1
fi

if [[ $2 ]] ; then
	INPUTLINKS=$2
else
	INPUTLINKS="`echo "$INPUT" | cut -f1 -d_`_links"
fi

if [[ $3 ]]; then
	OUT=$3
else
	OUT=$1_icmc.bib
	echo "
%	ICMC Bibliography file
%	Automatically generated by
%	make_icmc_bib.sh
%	fdch.github.io/tb
%	on `date`
" > $OUT
fi

function output_bib() {
	local TITLE=$1
	local AUTHOR=$2
	local YEAR=$3
	local URL=$4
	local ID=$5
echo "
@inproceedings{icmc/$ID,
  author    = {$AUTHOR},
  title     = {$TITLE},
  booktitle = {Proceedings of the International Computer Music Conference, {ICMC} $YEAR},
  pages     = {},
  year      = {$YEAR},
  crossref  = {icmc/$YEAR},
  url       = {$URL},
  timestamp = {},
  biburl    = {},
 bibsource = {}
}
"
}

#	Grab links from table and place them in order in a file
#	Then place them in these arrays

CNT=0
while read urls ; do
	UIDS[$CNT]=`echo "$urls" | cut -f6 -d/`
	UARR[$CNT]=`echo "$urls" | cut -f1-7 -d/`
	((CNT++))
done < "$INPUTLINKS"

#	Read the data columns where the html data is (concatenate all search result <table(s)> into one html file, then copy-paste the text into a column-separated "data_columns" file)

CNT=0
while read line ; do
	TITL=`echo "$line" | cut -f 1`
	#	Skip column headers
	if [[ "Title" == "$TITL" ]]; then continue; fi
	
	YEAR=`echo "$line" | cut -f 4`
	AUTH=`echo "$line" | cut -f 2`
	
	#	Check if multiple author, then
	#	Swap name with lastname for correct format...
	MULTIPLE=`awk '$0~/;/{print "1"}' <<< $AUTH`
	if [[ $MULTIPLE ]] ; then
		read -a NAMES <<< `echo "$AUTH" | tr ';' '\n' | cut -f 2 -d,`
		read -a LNAME <<< `echo "$AUTH" | tr ';' '\n' | cut -f 1 -d,`
		c=0
		AUTHNAME=''
		lim=${#NAMES[@]}
		((lim--))
		for i in ${NAMES[*]} ; do 
			AUTHNAME+=`echo "$i ${LNAME[$c]} "` 
			if [[ "$lim" > "$c" ]] ; then 
				AUTHNAME+="and "
			fi
			((c++))
		done
	else
		AUTHNAME="`echo "$AUTH" | cut -f 2 -d,` `echo "$AUTH" | cut -f 1 -d,`" 
	fi

	# echo $lim "$AUTHNAME" #"${UARR[$CNT]}" "${UIDS[$CNT]}" 
	# if [[ $CNT -gt 1 ]]; then exit ; fi
	
	# #	Call the bib setter
	output_bib "$TITL" "$AUTHNAME" "$YEAR" "${UARR[$CNT]}" "${UIDS[$CNT]}" >> $OUT
	((CNT++))
done < "$INPUT"

exit